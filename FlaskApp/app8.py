from flask import Flask, request, jsonify
import pandas as pd
import random
import os
import base64
import json
import subprocess
import tempfile
import time
from threading import Thread
from io import BytesIO
from PIL import Image
import math

app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# –ü–∞–ø–∫–∞ —Å –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
DEMO_PHOTOS_FOLDER = 'static/demo_photos'
if not os.path.exists(DEMO_PHOTOS_FOLDER):
    os.makedirs(DEMO_PHOTOS_FOLDER)

# –ü—É—Ç—å –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º—É —Å–∫—Ä–∏–ø—Ç—É –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
DAMAGE_ANALYSIS_SCRIPT = 'cvmain/test.py'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
PARSING_STATUS = {
    'in_progress': False,
    'last_completed': None,
    'current_task': None
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Excel
CAR_PRICES_DF = None

# –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –∑–∞ —Ä–µ–º–æ–Ω—Ç –≤–º—è—Ç–∏–Ω (—Ä—É–±/—Å–º¬≤)
BASE_DENT_REPAIR_RATES = {
    '—Å—Ç–∞–ª—å': {
        '–ª–µ–≥–∫–∏–π': 150,    # —Ä—É–±/—Å–º¬≤ –∑–∞ –ª–µ–≥–∫–∏–µ –≤–º—è—Ç–∏–Ω—ã
        '—Å—Ä–µ–¥–Ω–∏–π': 250,   # —Ä—É–±/—Å–º¬≤ –∑–∞ —Å—Ä–µ–¥–Ω–∏–µ –≤–º—è—Ç–∏–Ω—ã  
        '—Ç—è–∂–µ–ª—ã–π': 400    # —Ä—É–±/—Å–º¬≤ –∑–∞ —Ç—è–∂–µ–ª—ã–µ –≤–º—è—Ç–∏–Ω—ã
    },
    '–∞–ª—é–º–∏–Ω–∏–π': {
        '–ª–µ–≥–∫–∏–π': 200,    # +33% –∫ —Å—Ç–∞–ª–∏
        '—Å—Ä–µ–¥–Ω–∏–π': 350,   # +40% –∫ —Å—Ç–∞–ª–∏
        '—Ç—è–∂–µ–ª—ã–π': 550    # +37% –∫ —Å—Ç–∞–ª–∏
    },
    '–º–∞–≥–Ω–∏–µ–≤—ã–π —Å–ø–ª–∞–≤': {
        '–ª–µ–≥–∫–∏–π': 300,    # +100% –∫ —Å—Ç–∞–ª–∏
        '—Å—Ä–µ–¥–Ω–∏–π': 500,   # +100% –∫ —Å—Ç–∞–ª–∏
        '—Ç—è–∂–µ–ª—ã–π': 800    # +100% –∫ —Å—Ç–∞–ª–∏ (—á–∞—â–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞)
    },
    '–∫–æ–º–ø–æ–∑–∏—Ç': {
        '–ª–µ–≥–∫–∏–π': 400,    # —Å–ª–æ–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        '—Å—Ä–µ–¥–Ω–∏–π': 700,   # —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        '—Ç—è–∂–µ–ª—ã–π': 1200   # –æ–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω–∞
    }
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
REPAIR_COST_MULTIPLIERS = {
    '–≤–º—è—Ç–∏–Ω–∞': {
        '–ª–µ–≥–∫–∏–π': 0.3,   # –ù–µ–±–æ–ª—å—à–∞—è –≤–º—è—Ç–∏–Ω–∞ - –ª–µ–≥–∫–∏–π —Ä–µ–º–æ–Ω—Ç
        '—Å—Ä–µ–¥–Ω–∏–π': 0.5,  # –°—Ä–µ–¥–Ω—è—è –≤–º—è—Ç–∏–Ω–∞ 
        '—Ç—è–∂–µ–ª—ã–π': 0.8   # –°–∏–ª—å–Ω–∞—è –≤–º—è—Ç–∏–Ω–∞, –ø–æ—á—Ç–∏ –Ω–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
    },
    '—Ü–∞—Ä–∞–ø–∏–Ω–∞': {
        '–ª–µ–≥–∫–∏–π': 0.2,   # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞
        '—Å—Ä–µ–¥–Ω–∏–π': 0.4,  # –ì–ª—É–±–æ–∫–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞
        '—Ç—è–∂–µ–ª—ã–π': 0.7   # –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞ –¥–æ –º–µ—Ç–∞–ª–ª–∞
    },
    '—Ä–∞–∑—Ä—ã–≤': {
        '–ª–µ–≥–∫–∏–π': 0.6,
        '—Å—Ä–µ–¥–Ω–∏–π': 0.9,
        '—Ç—è–∂–µ–ª—ã–π': 1.2   # –†–∞–∑—Ä—ã–≤ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã
    }
}

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
MATERIAL_COMPLEXITY_MULTIPLIERS = {
    '—Å—Ç–∞–ª—å': 1.0,
    '–∞–ª—é–º–∏–Ω–∏–π': 1.4,      # +40% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    '–º–∞–≥–Ω–∏–µ–≤—ã–π —Å–ø–ª–∞–≤': 2.0, # +100% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    '–∫–æ–º–ø–æ–∑–∏—Ç': 2.5,      # +150% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    '–ø–ª–∞—Å—Ç–∏–∫': 0.8        # -20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ª–µ–≥—á–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (—Å–º¬≤)
MIN_DAMAGE_AREA = 50  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
MAX_DAMAGE_AREA = 200 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è

# –î–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
DEMO_PHOTOS = {
    'demo1': {
        'name': '–¶–∞—Ä–∞–ø–∏–Ω–∞',
        'description': '–°—Ä–µ–¥–Ω—è—è —Ü–∞—Ä–∞–ø–∏–Ω–∞',
        'base64': None
    },
    'demo2': {
        'name': '–í–º—è—Ç–∏–Ω—ã –Ω–∞ –¥–≤–µ—Ä—è—Ö',
        'description': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏—è—Ç–∏–Ω—ã –Ω–∞ –ø—Ä–∞–≤—ã—Ö –¥–≤–µ—Ä—è—Ö',
        'base64': None
    },
    'demo3': {
        'name': '–í–º—è—Ç–∏–Ω–∞',
        'description': '–í–º—è—Ç–∏–Ω–∞ –Ω–∞ –¥–≤–µ—Ä–∏',
        'base64': None
    },
    'demo4': {
        'name': '–¶–∞—Ä–∞–ø–∏–Ω–∞',
        'description': '–¶–∞—Ä–∞–ø–∏–Ω–∞ –Ω–∞ –¥–≤–µ—Ä–∏',
        'base64': None
    }
}

def convert_image_to_base64(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    try:
        with open(image_path, 'rb') as img_file:
            encoded_string = base64.b64encode(img_file.read()).decode('utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            if image_path.lower().endswith('.png'):
                mime_type = 'image/png'
            elif image_path.lower().endswith('.gif'):
                mime_type = 'image/gif'
            else:
                mime_type = 'image/jpeg'
                
            return f"data:{mime_type};base64,{encoded_string}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {image_path}: {e}")
        return None

def load_demo_photos():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–º–æ-—Ñ–æ—Ç–æ
    photo_files = {
        'demo1': ['1.jpg', '1.jpeg', '1.png'],
        'demo2': ['2.jpg', '2.jpeg', '2.png'],
        'demo3': ['3.jpg', '3.jpeg', '3.png'],
        'demo4': ['4.jpg', '4.jpeg', '4.png']
    }
    
    for demo_id, filenames in photo_files.items():
        photo_found = False
        for filename in filenames:
            photo_path = os.path.join(DEMO_PHOTOS_FOLDER, filename)
            if os.path.exists(photo_path):
                base64_data = convert_image_to_base64(photo_path)
                if base64_data:
                    DEMO_PHOTOS[demo_id]['base64'] = base64_data
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–µ–º–æ-—Ñ–æ—Ç–æ: {filename}")
                    photo_found = True
                    break
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {filename}")
        
        if not photo_found:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            print(f"‚ö†Ô∏è –§–∞–π–ª—ã –¥–ª—è {demo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
            DEMO_PHOTOS[demo_id]['base64'] = create_placeholder_svg(DEMO_PHOTOS[demo_id]['name'])

def create_placeholder_svg(name):
    """–°–æ–∑–¥–∞–µ—Ç SVG –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    svg_content = f'''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="#f0f0f0"/>
        <rect x="50" y="50" width="300" height="200" fill="#e0e0e0" stroke="#ccc" stroke-width="2"/>
        <text x="200" y="160" font-family="Arial" font-size="16" text-anchor="middle" fill="#666">{name}</text>
        <text x="200" y="185" font-family="Arial" font-size="12" text-anchor="middle" fill="#999">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ</text>
    </svg>'''
    return f"data:image/svg+xml;base64,{base64.b64encode(svg_content.encode()).decode()}"

def load_repair_prices_from_excel(file_path='huh_result.xlsx'):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞
    –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:
    - –ö–æ–ª–æ–Ω–∫–∏: '–º–∞—Ä–∫–∞', '–º–æ–¥–µ–ª—å', '–¥–µ—Ç–∞–ª—å', '–ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏', '–º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏', '—Ü–µ–Ω–∞', '—Å—Å—ã–ª–∫–∞'
    """
    global CAR_PRICES_DF
    try:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            CAR_PRICES_DF = None
            return None
        
        df = pd.read_excel(file_path)
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['–º–∞—Ä–∫–∞', '–º–æ–¥–µ–ª—å', '–¥–µ—Ç–∞–ª—å', '–ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏', '–º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏', '—Ü–µ–Ω–∞']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            CAR_PRICES_DF = None
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        df['–º–∞—Ä–∫–∞'] = df['–º–∞—Ä–∫–∞'].astype(str).str.strip()
        df['–º–æ–¥–µ–ª—å'] = df['–º–æ–¥–µ–ª—å'].astype(str).str.strip()
        df['–¥–µ—Ç–∞–ª—å'] = df['–¥–µ—Ç–∞–ª—å'].astype(str).str.strip()
        df['–ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏'] = df['–ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏'].astype(str).str.strip()
        df['–º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏'] = df['–º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏'].astype(str).str.strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if '—Å—Å—ã–ª–∫–∞' in df.columns:
            df['—Å—Å—ã–ª–∫–∞'] = df['—Å—Å—ã–ª–∫–∞'].astype(str).str.strip()
            # –ó–∞–º–µ–Ω—è–µ–º NaN –∏ 'nan' –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df['—Å—Å—ã–ª–∫–∞'] = df['—Å—Å—ã–ª–∫–∞'].replace(['nan', 'None', 'NaN'], '')
        else:
            df['—Å—Å—ã–ª–∫–∞'] = ''
        
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ü–µ–Ω–∞ - —á–∏—Å–ª–æ
        df['—Ü–µ–Ω–∞'] = pd.to_numeric(df['—Ü–µ–Ω–∞'], errors='coerce').fillna(0).astype(int)
        
        CAR_PRICES_DF = df
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {file_path}")
        print(f"üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head(3))
        return df
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        CAR_PRICES_DF = None
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
load_repair_prices_from_excel()
load_demo_photos()

def get_unique_brands():
    """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    global CAR_PRICES_DF
    if CAR_PRICES_DF is None:
        return []
    try:
        brands = CAR_PRICES_DF['–º–∞—Ä–∫–∞'].unique().tolist()
        print(f"üîß –ù–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–∏: {brands}")
        return sorted(brands)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–æ–∫: {e}")
        return []

def get_models_by_brand(brand):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ –º–∞—Ä–∫–µ"""
    global CAR_PRICES_DF
    if CAR_PRICES_DF is None:
        return []
    try:
        models = CAR_PRICES_DF[CAR_PRICES_DF['–º–∞—Ä–∫–∞'] == brand]['–º–æ–¥–µ–ª—å'].unique().tolist()
        print(f"üîß –î–ª—è –º–∞—Ä–∫–∏ '{brand}' –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏: {models}")
        return sorted(models)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –º–∞—Ä–∫–∏ {brand}: {e}")
        return []

def get_all_parts_for_model(brand, model):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    global CAR_PRICES_DF
    try:
        if CAR_PRICES_DF is None:
            return []
        
        parts = CAR_PRICES_DF[
            (CAR_PRICES_DF['–º–∞—Ä–∫–∞'] == brand) & 
            (CAR_PRICES_DF['–º–æ–¥–µ–ª—å'] == model)
        ]['–¥–µ—Ç–∞–ª—å'].unique().tolist()
        
        print(f"üîß –î–ª—è {brand} {model} –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")
        return parts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏: {e}")
        return []

def find_car_parts(brand, model):
    """
    –ò—â–µ—Ç –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    """
    global CAR_PRICES_DF
    try:
        if CAR_PRICES_DF is None:
            return pd.DataFrame()
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
        matching_parts = CAR_PRICES_DF[
            (CAR_PRICES_DF['–º–∞—Ä–∫–∞'] == brand) & 
            (CAR_PRICES_DF['–º–æ–¥–µ–ª—å'] == model)
        ]
        
        print(f"üîß –î–ª—è {brand} {model} –Ω–∞–π–¥–µ–Ω–æ {len(matching_parts)} –¥–µ—Ç–∞–ª–µ–π")
        return matching_parts
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
        return pd.DataFrame()

def analyze_damage_with_ai(photo_path, brand, model):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–∞ —Ñ–æ—Ç–æ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Ç–∏–ø–∞–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (–≤–º—è—Ç–∏–Ω–∞/—Ü–∞—Ä–∞–ø–∏–Ω–∞/—Ä–∞–∑—Ä—ã–≤) –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    """
    try:
        if not os.path.exists(DAMAGE_ANALYSIS_SCRIPT):
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {DAMAGE_ANALYSIS_SCRIPT}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—É—Ç–∏
            damage_type = "–≤–º—è—Ç–∏–Ω–∞"
            if "—Ü–∞—Ä–∞–ø–∏–Ω" in photo_path.lower() or "scratch" in photo_path.lower():
                damage_type = "—Ü–∞—Ä–∞–ø–∏–Ω–∞"
            elif "—Ñ–∞—Ä–∞" in photo_path.lower() or "headlight" in photo_path.lower():
                damage_type = "—Ä–∞–∑—Ä—ã–≤"
            elif "–∫–æ–º–ø–ª–µ–∫—Å" in photo_path.lower() or "complex" in photo_path.lower():
                damage_type = "–∫–æ–º–ø–ª–µ–∫—Å"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–º–æ-—Ñ–æ—Ç–æ
            if damage_type == "—Ü–∞—Ä–∞–ø–∏–Ω–∞":
                return {
                    'damages': [
                        {
                            'part': '–±–∞–º–ø–µ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π',
                            'damage_type': '—Ü–∞—Ä–∞–ø–∏–Ω–∞',
                            'severity': '–ª–µ–≥–∫–∏–π',
                            'confidence': 0.92,
                            'location': '—Ü–µ–Ω—Ç—Ä',
                            'area_cm2': 25,
                            'depth': '–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è'
                        },
                        {
                            'part': '–±–∞–º–ø–µ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π',
                            'damage_type': '—Ü–∞—Ä–∞–ø–∏–Ω–∞',
                            'severity': '—Å—Ä–µ–¥–Ω–∏–π',
                            'confidence': 0.85,
                            'location': '–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π',
                            'area_cm2': 15,
                            'depth': '–≥–ª—É–±–æ–∫–∞—è'
                        }
                    ]
                }
            elif damage_type == "—Ä–∞–∑—Ä—ã–≤":
                return {
                    'damages': [
                        {
                            'part': '—Ñ–∞—Ä–∞ –ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è',
                            'damage_type': '—Ä–∞–∑—Ä—ã–≤',
                            'severity': '—Ç—è–∂–µ–ª—ã–π',
                            'confidence': 0.95,
                            'location': '—Å—Ç–µ–∫–ª–æ',
                            'area_cm2': 80,
                            'depth': '–ø–æ–ª–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ'
                        }
                    ]
                }
            elif damage_type == "–∫–æ–º–ø–ª–µ–∫—Å":
                return {
                    'damages': [
                        {
                            'part': '–¥–≤–µ—Ä—å –ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è',
                            'damage_type': '–≤–º—è—Ç–∏–Ω–∞',
                            'severity': '—Å—Ä–µ–¥–Ω–∏–π',
                            'confidence': 0.88,
                            'location': '–Ω–∏–∑',
                            'area_cm2': 35,
                            'depth': '—Å—Ä–µ–¥–Ω—è—è'
                        },
                        {
                            'part': '–∫—Ä—ã–ª–æ –ø–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ',
                            'damage_type': '—Ü–∞—Ä–∞–ø–∏–Ω–∞',
                            'severity': '–ª–µ–≥–∫–∏–π',
                            'confidence': 0.78,
                            'location': '–≤–µ—Ä—Ö',
                            'area_cm2': 20,
                            'depth': '–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è'
                        }
                    ]
                }
            else:  # –≤–º—è—Ç–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    'damages': [
                        {
                            'part': '–¥–≤–µ—Ä—å –ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è',
                            'damage_type': '–≤–º—è—Ç–∏–Ω–∞',
                            'severity': '—Å—Ä–µ–¥–Ω–∏–π',
                            'confidence': 0.85,
                            'location': '—Ü–µ–Ω—Ç—Ä',
                            'area_cm2': 45,
                            'depth': '—Å—Ä–µ–¥–Ω—è—è'
                        }
                    ]
                }
        
        print(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è {brand} {model}")
        
        temp_dir = tempfile.gettempdir()
        output_file = os.path.join(temp_dir, f"damage_analysis_{random.randint(1000, 9999)}.json")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run([
            'python', DAMAGE_ANALYSIS_SCRIPT,
            '--image', photo_path,
            '--brand', brand,
            '--model', model,
            '--output', output_file
        ], capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞
            if os.path.exists(output_file):
                with open(output_file, 'r', encoding='utf-8') as f:
                    analysis_result = json.load(f)
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(output_file)
                return analysis_result
            else:
                print("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def calculate_dent_repair_cost(damage_area, material, severity, damage_type):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤–º—è—Ç–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—â–∞–¥–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    """
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material_lower = material.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        if '–∞–ª—é–º–∏–Ω' in material_lower:
            base_material = '–∞–ª—é–º–∏–Ω–∏–π'
        elif '–º–∞–≥–Ω' in material_lower or '—Å–ø–ª–∞–≤' in material_lower:
            base_material = '–º–∞–≥–Ω–∏–µ–≤—ã–π —Å–ø–ª–∞–≤'
        elif '–∫–æ–º–ø–æ–∑–∏—Ç' in material_lower or '–∫–∞—Ä–±–æ–Ω' in material_lower:
            base_material = '–∫–æ–º–ø–æ–∑–∏—Ç'
        elif '–ø–ª–∞—Å—Ç–∏–∫' in material_lower or '–ø–æ–ª–∏–º–µ—Ä' in material_lower:
            base_material = '–ø–ª–∞—Å—Ç–∏–∫'
        else:
            base_material = '—Å—Ç–∞–ª—å'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –î–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if base_material == '–ø–ª–∞—Å—Ç–∏–∫':
            if damage_type == '–≤–º—è—Ç–∏–Ω–∞':
                # –î–ª—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –≤–º—è—Ç–∏–Ω - –Ω–∞–≥—Ä–µ–≤ –∏ –≤—ã–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                base_rate = 100  # —Ä—É–±/—Å–º¬≤
                if severity == '—Ç—è–∂–µ–ª—ã–π':
                    base_rate = 200  # —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
            else:
                base_rate = 150  # –¥–ª—è —Ü–∞—Ä–∞–ø–∏–Ω –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–µ
        else:
            # –î–ª—è –º–µ—Ç–∞–ª–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏
            base_rate = BASE_DENT_REPAIR_RATES[base_material][severity]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        material_multiplier = MATERIAL_COMPLEXITY_MULTIPLIERS.get(base_material, 1.0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        base_cost = damage_area * base_rate * material_multiplier
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
        damage_multiplier = REPAIR_COST_MULTIPLIERS.get(damage_type, {}).get(severity, 1.0)
        
        final_cost = base_cost * damage_multiplier
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç–µ–Ω
        final_cost = math.ceil(final_cost / 100) * 100
        
        return int(final_cost), base_material
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞: {e}")
        return 0, '—Å—Ç–∞–ª—å'

def calculate_repair_cost(damage_analysis, brand, model):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    """
    global CAR_PRICES_DF
    try:
        if not damage_analysis or 'damages' not in damage_analysis:
            return []
        
        car_parts = find_car_parts(brand, model)
        damages_with_costs = []
        
        for damage in damage_analysis['damages']:
            damaged_part = damage.get('part', '')
            damage_type = damage.get('damage_type', '–≤–º—è—Ç–∏–Ω–∞')
            severity = damage.get('severity', '—Å—Ä–µ–¥–Ω–∏–π')
            damage_area = damage.get('area_cm2', random.randint(10,100))  # –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Å–º¬≤
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            damage_area = max(MIN_DAMAGE_AREA, min(damage_area, MAX_DAMAGE_AREA))
            
            # –ò—â–µ–º –¥–µ—Ç–∞–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            part_data = car_parts[car_parts['–¥–µ—Ç–∞–ª—å'] == damaged_part] if not car_parts.empty else pd.DataFrame()
            
            if not part_data.empty:
                # –î–µ—Ç–∞–ª—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                replacement_cost = int(part_data.iloc[0]['—Ü–µ–Ω–∞'])  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã
                part_material = str(part_data.iloc[0]['–º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏'])
                part_area = str(part_data.iloc[0]['–ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏'])
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–ª–æ—â–∞–¥–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
                repair_cost, detected_material = calculate_dent_repair_cost(
                    damage_area, part_material, severity, damage_type
                )
                
                # –î–ª—è —Ç—è–∂–µ–ª—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —Ä–µ–º–æ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–µ–Ω
                if (severity == '—Ç—è–∂–µ–ª—ã–π' and 
                    detected_material in ['–º–∞–≥–Ω–∏–µ–≤—ã–π —Å–ø–ª–∞–≤', '–∫–æ–º–ø–æ–∑–∏—Ç']):
                    repair_cost = min(repair_cost, replacement_cost)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                link = part_data.iloc[0].get('—Å—Å—ã–ª–∫–∞', '')
                if pd.isna(link) or link in ['', 'nan', 'None']:
                    link = ''
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                if repair_cost < replacement_cost * 0.7:  # –µ—Å–ª–∏ —Ä–µ–º–æ–Ω—Ç –¥–µ—à–µ–≤–ª–µ –∑–∞–º–µ–Ω—ã –Ω–∞ 30%
                    recommendation = "—Ä–µ–º–æ–Ω—Ç"
                    savings = replacement_cost - repair_cost
                else:
                    recommendation = "–∑–∞–º–µ–Ω–∞"
                    savings = 0
                
                damages_with_costs.append({
                    "part": damaged_part,
                    "area": part_area,
                    "material": part_material,
                    "detected_material": detected_material,
                    "damage_type": damage_type,
                    "severity": severity,
                    "confidence": float(damage.get('confidence', 0)),
                    "location": damage.get('location', ''),
                    "damage_area_cm2": damage_area,
                    "damage_depth": damage.get('depth', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    "repair_cost": repair_cost,
                    "replacement_cost": replacement_cost,
                    "recommendation": recommendation,
                    "savings": savings,
                    "link": link,
                    "estimated": False  # –§–ª–∞–≥ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                })
                
            else:
                # –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                # –û—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ü–∞—Ä–∞–ø–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏
                if any(keyword in damaged_part.lower() for keyword in ['–±–∞–º–ø–µ—Ä', '–æ–±–≤–µ—Å', '—Ä–µ—à–µ—Ç–∫–∞']):
                    default_material = '–ø–ª–∞—Å—Ç–∏–∫'
                elif any(keyword in damaged_part.lower() for keyword in ['–∫–∞–ø–æ—Ç', '–¥–≤–µ—Ä—å', '–∫—Ä—ã–ª–æ', '–∫—Ä—ã—à–∞']):
                    default_material = '—Å—Ç–∞–ª—å'
                elif any(keyword in damaged_part.lower() for keyword in ['—Ñ–∞—Ä–∞', '—Å—Ç–µ–∫–ª–æ', '–æ–ø—Ç–∏–∫–∞']):
                    default_material = '–∫–æ–º–ø–æ–∑–∏—Ç'
                else:
                    default_material = '—Å—Ç–∞–ª—å'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –î–ª—è —Ü–∞—Ä–∞–ø–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
                if damage_type == '—Ü–∞—Ä–∞–ø–∏–Ω–∞':
                    # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ü–∞—Ä–∞–ø–∏–Ω (—Ä—É–±/—Å–º¬≤)
                    scratch_rates = {
                        '–ª–µ–≥–∫–∏–π': 80,    # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞ - –ø–æ–ª–∏—Ä–æ–≤–∫–∞
                        '—Å—Ä–µ–¥–Ω–∏–π': 150,  # –°—Ä–µ–¥–Ω—è—è —Ü–∞—Ä–∞–ø–∏–Ω–∞ - —à–ø–∞—Ç–ª–µ–≤–∫–∞ –∏ –ø–æ–∫—Ä–∞—Å–∫–∞
                        '—Ç—è–∂–µ–ª—ã–π': 300   # –ì–ª—É–±–æ–∫–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞ - –ø–æ–ª–Ω–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞
                    }
                    
                    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    material_multipliers = {
                        '–ø–ª–∞—Å—Ç–∏–∫': 1.0,
                        '—Å—Ç–∞–ª—å': 1.2,
                        '–∞–ª—é–º–∏–Ω–∏–π': 1.5,
                        '–∫–æ–º–ø–æ–∑–∏—Ç': 2.0
                    }
                    
                    base_rate = scratch_rates.get(severity, 150)
                    material_multiplier = material_multipliers.get(default_material, 1.0)
                    
                    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ —Ü–∞—Ä–∞–ø–∏–Ω—ã
                    repair_cost = int(damage_area * base_rate * material_multiplier)
                    
                    # –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã (–µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
                    # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ç–∞–ª–µ–π
                    if '–±–∞–º–ø–µ—Ä' in damaged_part.lower():
                        replacement_cost = 15000  # —Ç–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –±–∞–º–ø–µ—Ä–∞
                    elif '–¥–≤–µ—Ä—å' in damaged_part.lower():
                        replacement_cost = 25000  # —Ç–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–≤–µ—Ä–∏
                    elif '–∫—Ä—ã–ª–æ' in damaged_part.lower():
                        replacement_cost = 12000  # —Ç–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –∫—Ä—ã–ª–∞
                    elif '—Ñ–∞—Ä–∞' in damaged_part.lower():
                        replacement_cost = 8000   # —Ç–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞ —Ñ–∞—Ä—ã
                    else:
                        # –û–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
                        replacement_cost = max(repair_cost * 3, 10000)
                    
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    repair_cost, detected_material = calculate_dent_repair_cost(
                        damage_area, default_material, severity, damage_type
                    )
                    
                    # –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã
                    replacement_cost = int(repair_cost * 2.5)  # –∑–∞–º–µ–Ω–∞ –æ–±—ã—á–Ω–æ –≤ 2-3 —Ä–∞–∑–∞ –¥–æ—Ä–æ–∂–µ —Ä–µ–º–æ–Ω—Ç–∞
                
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç–µ–Ω
                repair_cost = math.ceil(repair_cost / 100) * 100
                replacement_cost = math.ceil(replacement_cost / 100) * 100
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                if repair_cost < replacement_cost * 0.7:
                    recommendation = "—Ä–µ–º–æ–Ω—Ç"
                    savings = replacement_cost - repair_cost
                else:
                    recommendation = "–∑–∞–º–µ–Ω–∞"
                    savings = 0
                
                damages_with_costs.append({
                    "part": damaged_part,
                    "area": "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                    "material": "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                    "detected_material": default_material,
                    "damage_type": damage_type,
                    "severity": severity,
                    "confidence": float(damage.get('confidence', 0)),
                    "location": damage.get('location', ''),
                    "damage_area_cm2": damage_area,
                    "damage_depth": damage.get('depth', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    "repair_cost": repair_cost,
                    "replacement_cost": replacement_cost,
                    "recommendation": recommendation,
                    "savings": savings,
                    "link": "",
                    "estimated": True  # –§–ª–∞–≥ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                })
                
                print(f"‚ö†Ô∏è –î–µ—Ç–∞–ª—å '{damaged_part}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
        
        return damages_with_costs
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return []

def save_uploaded_photo(photo_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        if not photo_data:
            return None
            
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image –µ—Å–ª–∏ –µ—Å—Ç—å
        if ',' in photo_data:
            photo_data = photo_data.split(',')[1]
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        image_data = base64.b64decode(photo_data)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"car_photo_{random.randint(1000, 9999)}.jpg"
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(filepath, 'wb') as f:
            f.write(image_data)
        
        print(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        return None

# ========== –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê ==========

def parsing_complete_callback(result):
    """
    Callback —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    global CAR_PRICES_DF
    try:
        if result['success']:
            print(f"‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {result['brand']} {result['model']}")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {result['parsed_parts']}")
            print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: {result['found_prices']}")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            CAR_PRICES_DF = load_repair_prices_from_excel()
            print("üîÑ –î–∞–Ω–Ω—ã–µ Excel –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞: {result['error']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

def start_auto_parsing(brand, model, damaged_parts):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    def parsing_thread():
        global PARSING_STATUS
        try:
            PARSING_STATUS['in_progress'] = True
            PARSING_STATUS['current_task'] = f"{brand} {model}"
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from parser import auto_parse_damages, update_excel_with_parsed_data
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            parsed_df = auto_parse_damages(brand, model, damaged_parts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            update_excel_with_parsed_data(parsed_df)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pandas —Ç–∏–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã –¥–ª—è JSON
            found_prices = int((parsed_df['—Ü–µ–Ω–∞'] > 0).sum())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            PARSING_STATUS['in_progress'] = False
            PARSING_STATUS['last_completed'] = {
                'brand': brand,
                'model': model,
                'timestamp': time.time(),
                'parsed_parts': len(damaged_parts),
                'found_prices': found_prices
            }
            PARSING_STATUS['current_task'] = None
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            parsing_complete_callback({
                'success': True,
                'brand': brand,
                'model': model,
                'parsed_parts': len(damaged_parts),
                'found_prices': found_prices,
                'dataframe': parsed_df
            })
                
        except Exception as e:
            PARSING_STATUS['in_progress'] = False
            PARSING_STATUS['current_task'] = None
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            parsing_complete_callback({
                'success': False,
                'error': str(e)
            })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=parsing_thread)
    thread.daemon = True
    thread.start()
    
    print(f"üöÄ –ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {brand} {model}")
    return thread

def wait_for_parsing_completion(timeout=300):
    """
    –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    """
    start_time = time.time()
    while PARSING_STATUS['in_progress']:
        if time.time() - start_time > timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        time.sleep(2)
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    return True

# ========== –ú–ê–†–®–†–£–¢–´ FLASK ==========

@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1000px;
                margin: 50px auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .form-group {
                margin-bottom: 20px;
                position: relative;
            }
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: bold;
                color: #333;
            }
            input, select {
                width: 100%;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 6px;
                font-size: 16px;
                transition: border-color 0.3s;
                box-sizing: border-box;
            }
            input:focus, select:focus {
                outline: none;
                border-color: #007bff;
            }
            button {
                background-color: #007bff;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-size: 16px;
                width: 100%;
                transition: background-color 0.3s;
            }
            button:hover {
                background-color: #0056b3;
            }
            button:disabled {
                background-color: #6c757d;
                cursor: not-allowed;
            }
            .result {
                margin-top: 25px;
                padding: 20px;
                border-radius: 6px;
                display: none;
            }
            .success {
                background-color: #d4edda;
                border: 1px solid #c3e6cb;
                color: #155724;
            }
            .error {
                background-color: #f8d7da;
                border: 1px solid #f5c6cb;
                color: #721c24;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
                padding: 15px;
            }
            .damage-item {
                background: #f8f9fa;
                margin: 20px 0;
                padding: 25px;
                border-radius: 10px;
                border-left: 4px solid #007bff;
            }
            .cost-comparison {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin: 20px 0;
                padding: 20px;
                background: white;
                border-radius: 10px;
                border: 2px solid #e9ecef;
            }
            .repair-cost {
                text-align: center;
                padding: 20px;
                background: #e8f5e8;
                border-radius: 8px;
                border: 2px solid #28a745;
            }
            .replacement-cost {
                text-align: center;
                padding: 20px;
                background: #fff3cd;
                border-radius: 8px;
                border: 2px solid #ffc107;
            }
            .cost-value {
                font-size: 1.6em;
                font-weight: bold;
                margin: 15px 0;
            }
            .repair-value {
                color: #28a745;
            }
            .replacement-value {
                color: #856404;
            }
            .recommendation {
                text-align: center;
                padding: 15px;
                margin: 15px 0;
                border-radius: 8px;
                font-weight: bold;
                font-size: 1.1em;
            }
            .recommend-repair {
                background: #d4edda;
                color: #155724;
                border: 2px solid #c3e6cb;
            }
            .recommend-replacement {
                background: #f8d7da;
                color: #721c24;
                border: 2px solid #f5c6cb;
            }
            .total-cost {
                font-size: 1.6em;
                font-weight: bold;
                color: #28a745;
                text-align: center;
                margin-top: 30px;
                padding: 25px;
                background: #e8f5e8;
                border-radius: 10px;
                border: 3px solid #28a745;
            }
            .part-details {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
                margin-top: 15px;
                font-size: 0.95em;
            }
            .detail-item {
                color: #666;
                padding: 8px 0;
                border-bottom: 1px solid #eee;
            }
            .damage-details {
                background: #e7f3ff;
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
            }
            .damage-type-badge {
                display: inline-block;
                padding: 6px 15px;
                border-radius: 20px;
                font-size: 0.9em;
                font-weight: bold;
                margin-left: 10px;
            }
            .dent-badge {
                background: #007bff;
                color: white;
            }
            .scratch-badge {
                background: #28a745;
                color: white;
            }
            .break-badge {
                background: #dc3545;
                color: white;
            }
            .material-badge {
                display: inline-block;
                padding: 4px 12px;
                border-radius: 15px;
                font-size: 0.8em;
                font-weight: bold;
                margin-left: 8px;
            }
            .steel-badge {
                background: #6c757d;
                color: white;
            }
            .aluminum-badge {
                background: #17a2b8;
                color: white;
            }
            .magnesium-badge {
                background: #e83e8c;
                color: white;
            }
            .composite-badge {
                background: #6f42c1;
                color: white;
            }
            .plastic-badge {
                background: #fd7e14;
                color: white;
            }
            .autocomplete-list {
                position: absolute;
                border: 1px solid #d4d4d4;
                border-bottom: none;
                border-top: none;
                z-index: 99;
                top: 100%;
                left: 0;
                right: 0;
                background: white;
                max-height: 200px;
                overflow-y: auto;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                display: none;
            }
            .autocomplete-item {
                padding: 10px;
                cursor: pointer;
                border-bottom: 1px solid #d4d4d4;
                background: white;
            }
            .autocomplete-item:hover {
                background-color: #e9e9e9;
            }
            .autocomplete-active {
                background-color: #007bff !important;
                color: white;
            }
            .debug-info {
                margin-top: 10px;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 5px;
                font-size: 12px;
                color: #666;
            }
            .photo-upload {
                border: 2px dashed #ddd;
                border-radius: 6px;
                padding: 20px;
                text-align: center;
                cursor: pointer;
                transition: border-color 0.3s;
                margin-bottom: 15px;
            }
            .photo-upload:hover {
                border-color: #007bff;
            }
            .photo-upload.dragover {
                border-color: #007bff;
                background-color: #f0f8ff;
            }
            .photo-preview {
                max-width: 100%;
                max-height: 200px;
                margin-top: 10px;
                display: none;
                border-radius: 4px;
            }
            .remove-photo {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                cursor: pointer;
                margin-top: 5px;
            }
            .remove-photo:hover {
                background-color: #c82333;
            }
            .upload-icon {
                font-size: 48px;
                color: #6c757d;
                margin-bottom: 10px;
            }
            .ai-analysis-badge {
                background: #17a2b8;
                color: white;
                padding: 4px 12px;
                border-radius: 12px;
                font-size: 0.9em;
                margin-left: 10px;
            }
            .part-link {
                display: inline-block;
                background: #007bff;
                color: white;
                padding: 8px 16px;
                border-radius: 6px;
                text-decoration: none;
                font-size: 0.95em;
                margin-top: 10px;
                transition: background-color 0.3s;
            }
            .part-link:hover {
                background: #0056b3;
            }
            .no-link {
                color: #6c757d;
                font-style: italic;
                font-size: 0.9em;
            }
            .parsing-status {
                background: #e7f3ff;
                padding: 12px;
                border-radius: 5px;
                margin: 15px 0;
                border-left: 4px solid #007bff;
            }
            .parsing-message {
                color: #0066cc;
                font-weight: bold;
                margin: 0;
            }
            .step-indicator {
                display: flex;
                justify-content: space-between;
                margin: 20px 0;
                position: relative;
            }
            .step {
                flex: 1;
                text-align: center;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 5px;
                margin: 0 5px;
                font-weight: bold;
            }
            .step.active {
                background: #007bff;
                color: white;
            }
            .step.completed {
                background: #28a745;
                color: white;
            }
            .damage-area-info {
                background: #fff3cd;
                padding: 10px;
                border-radius: 5px;
                margin: 10px 0;
                font-size: 0.9em;
            }
            .demo-photos {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
                margin: 20px 0;
            }
            .demo-photo-item {
                border: 2px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s;
                background: white;
            }
            .demo-photo-item:hover {
                border-color: #007bff;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }
            .demo-photo-item.active {
                border-color: #28a745;
                background: #f8fff8;
            }
            .demo-photo-preview {
                width: 100%;
                height: 120px;
                object-fit: contain;
                margin-bottom: 10px;
                border-radius: 4px;
                background: #f8f9fa;
            }
            .demo-photo-name {
                font-weight: bold;
                margin-bottom: 5px;
                color: #333;
            }
            .demo-photo-desc {
                font-size: 12px;
                color: #666;
            }
            .demo-section {
                margin: 25px 0;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid #17a2b8;
            }
            .demo-section h3 {
                margin-top: 0;
                color: #17a2b8;
                display: flex;
                align-items: center;
                gap: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 style="text-align: center; color: #333; margin-bottom: 30px;">
                üöó AI –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            </h1>
            
            <div class="step-indicator">
                <div class="step" id="step1">1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</div>
                <div class="step" id="step2">2. –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ</div>
                <div class="step" id="step3">3. –†–µ–∑—É–ª—å—Ç–∞—Ç</div>
            </div>
            
            <div class="parsing-status" id="parsingStatus">
                <p class="parsing-message" id="parsingMessage">
                    üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏...
                </p>
            </div>
            
            <form id="carForm">
                <div class="form-group">
                    <label for="brand">–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</label>
                    <input type="text" id="brand" name="brand" required 
                           placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –º–∞—Ä–∫—É..." autocomplete="off">
                    <div id="brandAutocomplete" class="autocomplete-list"></div>
                </div>
                
                <div class="form-group">
                    <label for="model">–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</label>
                    <input type="text" id="model" name="model" required 
                           placeholder="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É..." autocomplete="off" disabled>
                    <div id="modelAutocomplete" class="autocomplete-list"></div>
                </div>
                
                <div class="demo-section">
                    <h3>üéØ –î–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                    <p style="margin-bottom: 15px; color: #666;">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:</p>
                    
                    <div class="demo-photos" id="demoPhotos">
                        <!-- –î–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="photo">–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:</label>
                    <div class="photo-upload" id="photoUpload">
                        <div class="upload-icon">üì∑</div>
                        <div>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞</div>
                        <div style="font-size: 12px; color: #666; margin-top: 5px;">
                            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF (–º–∞–∫—Å. 5MB)
                        </div>
                        <input type="file" id="photoInput" accept="image/*" style="display: none;">
                        <img id="photoPreview" class="photo-preview" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ">
                    </div>
                    <div style="font-size: 12px; color: #dc3545; margin-top: 5px;">
                        * –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
                    </div>
                    <button type="button" id="removePhoto" class="remove-photo" style="display: none;">–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ</button>
                </div>
                
                <button type="submit" id="submitBtn">üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</button>
            </form>
            
            <div class="debug-info" id="debugInfo">
                –°—Ç–∞—Ç—É—Å: <span id="status">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            
            <div class="loading" id="loading">
                <p id="loadingMessage">ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ...</p>
                <p><small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</small></p>
            </div>
            
            <div class="result" id="result"></div>
        </div>

        <script>
            let allBrands = [];
            let brandModels = {};
            let currentPhoto = null;
            let selectedDemoPhoto = null;

            // –î–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            let demoPhotos = {};

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –∏ –¥–µ–º–æ-—Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –∏ –¥–µ–º–æ-—Ñ–æ—Ç–æ...');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–∏
                fetch('/get-brands')
                    .then(response => response.json())
                    .then(data => {
                        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–æ–∫:', data);
                        if (data.success) {
                            allBrands = data.brands;
                            document.getElementById('status').textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allBrands.length} –º–∞—Ä–æ–∫`;
                            console.log('–ú–∞—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allBrands);
                        } else {
                            document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫: ' + data.error;
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫:', data.error);
                        }
                    })
                    .catch(error => {
                        document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–æ–∫';
                        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
                    });

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                fetch('/get-demo-photos')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            demoPhotos = data.demo_photos;
                            console.log('–î–µ–º–æ-—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(demoPhotos));
                            initDemoPhotos();
                        } else {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-—Ñ–æ—Ç–æ:', data.error);
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-—Ñ–æ—Ç–æ:', error);
                    });
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                setInterval(checkParsingStatus, 2000);
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            function initDemoPhotos() {
                const demoPhotosContainer = document.getElementById('demoPhotos');
                demoPhotosContainer.innerHTML = '';
                
                Object.keys(demoPhotos).forEach(photoKey => {
                    const photo = demoPhotos[photoKey];
                    const photoItem = document.createElement('div');
                    photoItem.className = 'demo-photo-item';
                    photoItem.innerHTML = `
                        <img src="${photo.base64}" alt="${photo.name}" class="demo-photo-preview">
                        <div class="demo-photo-name">${photo.name}</div>
                        <div class="demo-photo-desc">${photo.description}</div>
                    `;
                    
                    photoItem.addEventListener('click', function() {
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
                        document.querySelectorAll('.demo-photo-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
                        this.classList.add('active');
                        selectedDemoPhoto = photoKey;
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
                        currentPhoto = photo.base64;
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        const photoPreview = document.getElementById('photoPreview');
                        photoPreview.src = photo.base64;
                        photoPreview.style.display = 'block';
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                        document.getElementById('photoUpload').innerHTML = `
                            <div>–î–µ–º–æ-—Ñ–æ—Ç–æ: ${photo.name}</div>
                            <div style="font-size: 12px; color: #666; margin-top: 5px;">
                                ${photo.description}
                            </div>
                        `;
                        document.getElementById('photoUpload').appendChild(photoPreview);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                        document.getElementById('removePhoto').style.display = 'block';
                        
                        console.log(`–í—ã–±—Ä–∞–Ω–æ –¥–µ–º–æ-—Ñ–æ—Ç–æ: ${photo.name}`);
                    });
                    
                    demoPhotosContainer.appendChild(photoItem);
                });
            }

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            function checkParsingStatus() {
                fetch('/parsing-status')
                    .then(response => response.json())
                    .then(data => {
                        const statusDiv = document.getElementById('parsingStatus');
                        if (data.in_progress) {
                            statusDiv.style.display = 'block';
                            document.getElementById('parsingMessage').textContent = 
                                `üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è ${data.current_task}...`;
                        } else {
                            statusDiv.style.display = 'none';
                            if (data.last_completed) {
                                console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${data.last_completed.brand} ${data.last_completed.model}`);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
                    });
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∞–≥–æ–≤
            function updateStepIndicator(step, status) {
                const stepElement = document.getElementById(`step${step}`);
                stepElement.className = 'step';
                if (status === 'active') {
                    stepElement.classList.add('active');
                } else if (status === 'completed') {
                    stepElement.classList.add('completed');
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            const photoUpload = document.getElementById('photoUpload');
            const photoInput = document.getElementById('photoInput');
            const photoPreview = document.getElementById('photoPreview');
            const removePhotoBtn = document.getElementById('removePhoto');

            // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            photoUpload.addEventListener('click', function() {
                photoInput.click();
            });

            // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            photoInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    handlePhotoUpload(file);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–º–æ-—Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
                    if (selectedDemoPhoto) {
                        document.querySelectorAll('.demo-photo-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        selectedDemoPhoto = null;
                    }
                }
            });

            // Drag and drop
            photoUpload.addEventListener('dragover', function(e) {
                e.preventDefault();
                photoUpload.classList.add('dragover');
            });

            photoUpload.addEventListener('dragleave', function() {
                photoUpload.classList.remove('dragover');
            });

            photoUpload.addEventListener('drop', function(e) {
                e.preventDefault();
                photoUpload.classList.remove('dragover');
                const file = e.dataTransfer.files[0];
                if (file && file.type.startsWith('image/')) {
                    handlePhotoUpload(file);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–º–æ-—Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
                    if (selectedDemoPhoto) {
                        document.querySelectorAll('.demo-photo-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        selectedDemoPhoto = null;
                    }
                }
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
            removePhotoBtn.addEventListener('click', function() {
                currentPhoto = null;
                selectedDemoPhoto = null;
                photoInput.value = '';
                photoPreview.style.display = 'none';
                removePhotoBtn.style.display = 'none';
                photoUpload.innerHTML = `
                    <div class="upload-icon">üì∑</div>
                    <div>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞</div>
                    <div style="font-size: 12px; color: #666; margin-top: 5px;">
                        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF (–º–∞–∫—Å. 5MB)
                    </div>
                `;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–º–æ-—Ñ–æ—Ç–æ
                document.querySelectorAll('.demo-photo-item').forEach(item => {
                    item.classList.remove('active');
                });
            });

            function handlePhotoUpload(file) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB)
                if (file.size > 5 * 1024 * 1024) {
                    alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    currentPhoto = e.target.result;
                    photoPreview.src = currentPhoto;
                    photoPreview.style.display = 'block';
                    removePhotoBtn.style.display = 'block';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                    photoUpload.innerHTML = `
                        <div>–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${file.name}</div>
                        <div style="font-size: 12px; color: #666; margin-top: 5px;">
                            –†–∞–∑–º–µ—Ä: ${(file.size / 1024 / 1024).toFixed(2)} MB
                        </div>
                    `;
                    photoUpload.appendChild(photoPreview);
                };
                reader.readAsDataURL(file);
            }

            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–∏
            document.getElementById('brand').addEventListener('input', function(e) {
                const input = e.target.value;
                const autocomplete = document.getElementById('brandAutocomplete');
                
                if (input.length === 0) {
                    autocomplete.style.display = 'none';
                    document.getElementById('model').disabled = true;
                    document.getElementById('model').value = '';
                    document.getElementById('model').placeholder = '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É...';
                    document.getElementById('modelAutocomplete').style.display = 'none';
                    return;
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ä–∫–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                const filteredBrands = allBrands.filter(brand => 
                    brand.toLowerCase().includes(input.toLowerCase())
                );

                if (filteredBrands.length === 0) {
                    autocomplete.style.display = 'none';
                    return;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
                autocomplete.innerHTML = '';
                filteredBrands.forEach(brand => {
                    const item = document.createElement('div');
                    item.className = 'autocomplete-item';
                    item.textContent = brand;
                    item.addEventListener('click', function() {
                        document.getElementById('brand').value = brand;
                        autocomplete.style.display = 'none';
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
                        loadModelsForBrand(brand);
                        document.getElementById('model').disabled = false;
                        document.getElementById('model').placeholder = '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –º–æ–¥–µ–ª—å...';
                        document.getElementById('model').focus();
                    });
                    autocomplete.appendChild(item);
                });
                autocomplete.style.display = 'block';
            });

            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            document.getElementById('model').addEventListener('input', function(e) {
                const input = e.target.value;
                const brand = document.getElementById('brand').value;
                const autocomplete = document.getElementById('modelAutocomplete');
                
                if (input.length === 0 || !brand) {
                    autocomplete.style.display = 'none';
                    return;
                }

                const models = brandModels[brand] || [];
                const filteredModels = models.filter(model => 
                    model.toLowerCase().includes(input.toLowerCase())
                );

                if (filteredModels.length === 0) {
                    autocomplete.style.display = 'none';
                    return;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
                autocomplete.innerHTML = '';
                filteredModels.forEach(model => {
                    const item = document.createElement('div');
                    item.className = 'autocomplete-item';
                    item.textContent = model;
                    item.addEventListener('click', function() {
                        document.getElementById('model').value = model;
                        autocomplete.style.display = 'none';
                    });
                    autocomplete.appendChild(item);
                });
                autocomplete.style.display = 'block';
            });

            // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
            function loadModelsForBrand(brand) {
                document.getElementById('status').textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è ${brand}...`;
                
                fetch('/get-models?brand=' + encodeURIComponent(brand))
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            brandModels[brand] = data.models;
                            document.getElementById('status').textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.models.length} –º–æ–¥–µ–ª–µ–π –¥–ª—è ${brand}`;
                        } else {
                            document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ' + data.error;
                            brandModels[brand] = [];
                        }
                    })
                    .catch(error => {
                        document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π';
                        brandModels[brand] = [];
                    });
            }

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
            document.addEventListener('click', function(e) {
                if (!e.target.matches('#brand') && !e.target.matches('#model')) {
                    document.getElementById('brandAutocomplete').style.display = 'none';
                    document.getElementById('modelAutocomplete').style.display = 'none';
                }
            });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
            document.getElementById('carForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const brand = document.getElementById('brand').value;
                const model = document.getElementById('model').value;
                const submitBtn = document.getElementById('submitBtn');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                if (!currentPhoto) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ-—Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
                    return;
                }
                
                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã:', { brand, model, hasPhoto: !!currentPhoto, demoPhoto: selectedDemoPhoto });
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                submitBtn.disabled = true;
                submitBtn.textContent = 'üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...';
                document.getElementById('loading').style.display = 'block';
                document.getElementById('loadingMessage').textContent = 'üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö...';
                document.getElementById('result').style.display = 'none';
                document.getElementById('status').textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤
                updateStepIndicator(1, 'active');
                updateStepIndicator(2, '');
                updateStepIndicator(3, '');
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                document.getElementById('brandAutocomplete').style.display = 'none';
                document.getElementById('modelAutocomplete').style.display = 'none';
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const formData = {
                    brand: brand,
                    model: model,
                    photo: currentPhoto
                };
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                fetch('/analyze-damage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
                    document.getElementById('loading').style.display = 'none';
                    
                    const resultDiv = document.getElementById('result');
                    
                    if (data.success) {
                        resultDiv.className = 'result success';
                        let html = `<h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${data.brand} ${data.model}</h3>`;
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
                        if (data.photo_preview) {
                            html += `<div style="text-align: center; margin: 15px 0;">
                                        <img src="${data.photo_preview}" style="max-width: 300px; max-height: 200px; border-radius: 8px; border: 2px solid #ddd;">
                                        <div style="font-size: 12px; color: #666; margin-top: 5px;">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ —Ñ–æ—Ç–æ</div>
                                    </div>`;
                        }
                        
                        html += `<h4>üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: <span class="ai-analysis-badge">AI –∞–Ω–∞–ª–∏–∑</span></h4>`;
                        
                        if (data.damages && data.damages.length > 0) {
                            let totalRepairCost = 0;
                            let totalReplacementCost = 0;
                            
                            data.damages.forEach(damage => {
                                totalRepairCost += damage.repair_cost;
                                totalReplacementCost += damage.replacement_cost;
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–π–¥–∂ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
                                let damageTypeBadge = '';
                                let damageBadgeClass = '';
                                switch(damage.damage_type.toLowerCase()) {
                                    case '–≤–º—è—Ç–∏–Ω–∞':
                                        damageBadgeClass = 'dent-badge';
                                        break;
                                    case '—Ü–∞—Ä–∞–ø–∏–Ω–∞':
                                        damageBadgeClass = 'scratch-badge';
                                        break;
                                    case '—Ä–∞–∑—Ä—ã–≤':
                                        damageBadgeClass = 'break-badge';
                                        break;
                                    default:
                                        damageBadgeClass = 'dent-badge';
                                }
                                damageTypeBadge = `<span class="damage-type-badge ${damageBadgeClass}">${damage.damage_type}</span>`;
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–π–¥–∂ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                                let materialBadge = '';
                                let materialBadgeClass = '';
                                switch(damage.detected_material.toLowerCase()) {
                                    case '—Å—Ç–∞–ª—å':
                                        materialBadgeClass = 'steel-badge';
                                        break;
                                    case '–∞–ª—é–º–∏–Ω–∏–π':
                                        materialBadgeClass = 'aluminum-badge';
                                        break;
                                    case '–º–∞–≥–Ω–∏–µ–≤—ã–π —Å–ø–ª–∞–≤':
                                        materialBadgeClass = 'magnesium-badge';
                                        break;
                                    case '–∫–æ–º–ø–æ–∑–∏—Ç':
                                        materialBadgeClass = 'composite-badge';
                                        break;
                                    case '–ø–ª–∞—Å—Ç–∏–∫':
                                        materialBadgeClass = 'plastic-badge';
                                        break;
                                    default:
                                        materialBadgeClass = 'steel-badge';
                                }
                                materialBadge = `<span class="material-badge ${materialBadgeClass}">${damage.detected_material}</span>`;
                                
                                let linkHtml = '';
                                if (damage.link && damage.link !== '') {
                                    linkHtml = `<a href="${damage.link}" target="_blank" class="part-link">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª—å</a>`;
                                } else {
                                    linkHtml = `<span class="no-link">üîó –°—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞</span>`;
                                }
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                                const recommendationClass = damage.recommendation === '—Ä–µ–º–æ–Ω—Ç' ? 
                                    'recommend-repair' : 'recommend-replacement';
                                const recommendationIcon = damage.recommendation === '—Ä–µ–º–æ–Ω—Ç' ? 'üîß' : 'üîÑ';
                                
                                html += `
                                    <div class="damage-item">
                                        <div style="display: flex; justify-content: space-between; align-items: center;">
                                            <strong style="font-size: 1.2em;">${damage.part}</strong>
                                            <div>
                                                ${damageTypeBadge}
                                                ${materialBadge}
                                            </div>
                                        </div>
                                        
                                        <div class="damage-details">
                                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                                <div><strong>üìè –ü–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</strong> ${damage.damage_area_cm2} —Å–º¬≤</div>
                                                <div><strong>üìê –ü–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏:</strong> ${damage.area}</div>
                                                <div><strong>‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞:</strong> ${damage.severity}</div>
                                            </div>
                                            <div style="margin-top: 10px;">
                                                <strong>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${damage.location}
                                                <span style="margin-left: 20px;"><strong>üéØ –¢–æ—á–Ω–æ—Å—Ç—å:</strong> ${Math.round(damage.confidence * 100)}%</span>
                                            </div>
                                        </div>
                                        
                                        <div class="cost-comparison">
                                            <div class="repair-cost">
                                                <div>üîß –†–µ–º–æ–Ω—Ç</div>
                                                <div class="cost-value repair-value">${damage.repair_cost.toLocaleString('ru-RU')} —Ä—É–±.</div>
                                                <small>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (${damage.damage_area_cm2} —Å–º¬≤ √ó –º–∞—Ç–µ—Ä–∏–∞–ª)</small>
                                            </div>
                                            <div class="replacement-cost">
                                                <div>üîÑ –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞</div>
                                                <div class="cost-value replacement-value">${damage.replacement_cost.toLocaleString('ru-RU')} —Ä—É–±.</div>
                                                <small>–ù–æ–≤–∞—è –¥–µ—Ç–∞–ª—å</small>
                                            </div>
                                        </div>
                                        
                                        <div class="recommendation ${recommendationClass}">
                                            ${recommendationIcon} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <strong>${damage.recommendation.toUpperCase()}</strong>
                                            ${damage.recommendation === '—Ä–µ–º–æ–Ω—Ç' ? 
                                                `(—ç–∫–æ–Ω–æ–º–∏—è ${damage.savings.toLocaleString('ru-RU')} —Ä—É–±.)` : 
                                                '(—Ä–µ–º–æ–Ω—Ç –Ω–µ—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–µ–Ω)'}
                                        </div>
                                        
                                        <div style="margin-top: 15px;">
                                            ${linkHtml}
                                        </div>
                                    </div>
                                `;
                            });
                            
                            // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            const totalSavings = totalReplacementCost - totalRepairCost;
                            const finalRecommendation = totalRepairCost < totalReplacementCost ? '—Ä–µ–º–æ–Ω—Ç' : '–∑–∞–º–µ–Ω–∞';
                            
                            html += `
                                <div class="total-cost">
                                    <div>üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: ${totalRepairCost.toLocaleString('ru-RU')} —Ä—É–±.</div>
                                    <div>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã: ${totalReplacementCost.toLocaleString('ru-RU')} —Ä—É–±.</div>
                                    <div style="margin-top: 15px; font-size: 1.3em; padding: 15px; background: white; border-radius: 8px;">
                                        üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <strong>${finalRecommendation.toUpperCase()}</strong>
                                        ${finalRecommendation === '—Ä–µ–º–æ–Ω—Ç' ? 
                                            `(—ç–∫–æ–Ω–æ–º–∏—è ${totalSavings.toLocaleString('ru-RU')} —Ä—É–±.)` : 
                                            ''}
                                    </div>
                                </div>
                            `;
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
                            if (data.background_parsing > 0) {
                                html += `<div style="margin-top: 15px; padding: 10px; background: #e7f3ff; border-radius: 5px;">
                                            <small>üîÑ –ó–∞–ø—É—â–µ–Ω–æ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è ${data.background_parsing} –¥–µ—Ç–∞–ª–µ–π</small>
                                        </div>`;
                            }
                        } else {
                            html += `<p>‚ùå AI –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–∞ —Ñ–æ—Ç–æ</p>`;
                        }
                        
                        resultDiv.innerHTML = html;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤
                        updateStepIndicator(1, 'completed');
                        updateStepIndicator(2, 'completed');
                        updateStepIndicator(3, 'completed');
                    } else {
                        resultDiv.className = 'result error';
                        resultDiv.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞: ${data.error}</p>`;
                        
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        updateStepIndicator(1, '');
                        updateStepIndicator(2, '');
                        updateStepIndicator(3, '');
                    }
                    
                    resultDiv.style.display = 'block';
                })
                .catch(error => {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
                    document.getElementById('loading').style.display = 'none';
                    
                    const resultDiv = document.getElementById('result');
                    resultDiv.className = 'result error';
                    resultDiv.innerHTML = '<p>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞</p>';
                    resultDiv.style.display = 'block';
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    updateStepIndicator(1, '');
                    updateStepIndicator(2, '');
                    updateStepIndicator(3, '');
                    
                    console.error('Error:', error);
                });
            });
        </script>
    </body>
    </html>
    '''

@app.route('/get-brands')
def get_brands():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫"""
    try:
        brands = get_unique_brands()
        print(f"üì° GET /get-brands -> {len(brands)} –º–∞—Ä–æ–∫")
        return jsonify({
            "success": True,
            "brands": brands
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_brands: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/get-models')
def get_models():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏"""
    try:
        brand = request.args.get('brand', '')
        print(f"üì° GET /get-models?brand={brand}")
        
        if not brand:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–∞—Ä–∫–∞"
            })
        
        models = get_models_by_brand(brand)
        return jsonify({
            "success": True,
            "models": models
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_models –¥–ª—è –º–∞—Ä–∫–∏ '{brand}': {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/get-demo-photos')
def get_demo_photos():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        print(f"üì° GET /get-demo-photos -> {len(DEMO_PHOTOS)} —Ñ–æ—Ç–æ")
        return jsonify({
            "success": True,
            "demo_photos": DEMO_PHOTOS
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_demo_photos: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/parsing-status')
def parsing_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ —Ç–∏–ø—ã
    status_data = {
        "in_progress": PARSING_STATUS['in_progress'],
        "current_task": PARSING_STATUS['current_task']
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º last_completed –æ—Ç–¥–µ–ª—å–Ω–æ, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
    if PARSING_STATUS['last_completed']:
        last_completed = PARSING_STATUS['last_completed'].copy()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã
        if 'timestamp' in last_completed:
            last_completed['timestamp'] = float(last_completed['timestamp'])
        if 'parsed_parts' in last_completed:
            last_completed['parsed_parts'] = int(last_completed['parsed_parts'])
        if 'found_prices' in last_completed:
            last_completed['found_prices'] = int(last_completed['found_prices'])
        status_data['last_completed'] = last_completed
    else:
        status_data['last_completed'] = None
    
    return jsonify(status_data)

@app.route('/analyze-damage', methods=['POST'])
def analyze_damage_endpoint():
    global CAR_PRICES_DF
    try:
        data = request.get_json()
        
        brand = data.get('brand', '').strip()
        model = data.get('model', '').strip()
        photo_data = data.get('photo', '')
        
        print(f"üì° POST /analyze-damage -> {brand} {model}, —Ñ–æ—Ç–æ: {'–µ—Å—Ç—å' if photo_data else '–Ω–µ—Ç'}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not brand or not model:
            return jsonify({
                "success": False,
                "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
            })
        
        if not photo_data:
            return jsonify({
                "success": False,
                "error": "–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
        if CAR_PRICES_DF is None:
            return jsonify({
                "success": False,
                "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª huh_result.xlsx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
            })
        
        # üîÑ –ü–ï–†–í–´–ô –≠–¢–ê–ü: –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ò–ù–ì –ò –ñ–î–ï–ú –ï–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {brand} {model}")
        all_parts = get_all_parts_for_model(brand, model)
        
        if all_parts:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            start_auto_parsing(
                brand=brand,
                model=model,
                damaged_parts=all_parts
            )
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {len(all_parts)} –¥–µ—Ç–∞–ª–µ–π...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            if not wait_for_parsing_completion():
                return jsonify({
                    "success": False,
                    "error": "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                })
            
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        else:
            print(f"‚ö†Ô∏è –î–ª—è {brand} {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        # üîÑ –í–¢–û–†–û–ô –≠–¢–ê–ü: –ê–ù–ê–õ–ò–ó –§–û–¢–û –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_path = save_uploaded_photo(photo_data)
        if not photo_path:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
            })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        damage_analysis = analyze_damage_with_ai(photo_path, brand, model)
        
        if not damage_analysis:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞."
            })
        
        # üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó EXCEL (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)
        CAR_PRICES_DF = load_repair_prices_from_excel()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        damages_with_costs = calculate_repair_cost(damage_analysis, brand, model)
        
        if not damages_with_costs:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ"
            })
        
        total_repair_cost = sum(damage["repair_cost"] for damage in damages_with_costs)
        total_replacement_cost = sum(damage["replacement_cost"] for damage in damages_with_costs)
        
        response_data = {
            "success": True,
            "brand": brand,
            "model": model,
            "damages": damages_with_costs,
            "total_repair_cost": int(total_repair_cost),
            "total_replacement_cost": int(total_replacement_cost),
            "photo_preview": photo_data,
            "analysis_method": "AI",
            "background_parsing": len(all_parts) if all_parts else 0
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_damage: {e}")
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã AI –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    print(f"üîß –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞: {DAMAGE_ANALYSIS_SCRIPT}")
    
    if CAR_PRICES_DF is not None:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(CAR_PRICES_DF)} –∑–∞–ø–∏—Å–µ–π –∏–∑ huh_result.xlsx")
        print("üöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–∏:", get_unique_brands())
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞")
        print("üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª huh_result.xlsx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:")
        print("   - –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –¥–µ—Ç–∞–ª—å, –ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–∏, –º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ç–∞–ª–∏, —Ü–µ–Ω–∞, —Å—Å—ã–ª–∫–∞")
    
    print("üì∏ –î–µ–º–æ-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
    for demo_id, photo_info in DEMO_PHOTOS.items():
        status = "‚úÖ" if photo_info['base64'] else "‚ùå"
        print(f"   {status} {photo_info['name']}")
    
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:5000")
    app.run(debug=True, port=5000)
